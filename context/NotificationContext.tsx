// src/context/NotificationContext.tsx

import React, { createContext, useContext, useEffect } from 'react';
import { supabase } from '../services/supabase';
import { playNotificationSound } from '../utils/soundManager';
import AsyncStorage from '@react-native-async-storage/async-storage';

interface NotificationContextType {
  lastNotificationTime?: number;
}

const NotificationContext = createContext<NotificationContextType>({});

export const useNotifications = () => {
  return useContext(NotificationContext);
};

// Provider n√†y s·∫Ω bao b·ªçc to√†n b·ªô ·ª©ng d·ª•ng c·ªßa b·∫°n
export const NotificationProvider = ({ children }: { children: React.ReactNode }) => {
  // [C·∫¨P NH·∫¨T] S·ª≠ d·ª•ng useRef thay v√¨ useState ƒë·ªÉ l∆∞u th·ªùi gian m√† kh√¥ng re-render
  const lastNotificationTimeRef = React.useRef<number>(0);
  // [M·ªöI] S·ª≠ d·ª•ng useRef ƒë·ªÉ l∆∞u user role (kh√¥ng re-render, persistent)
  const userRoleRef = React.useRef<string>('');

  useEffect(() => {
    console.log('[NotificationContext] Kh·ªüi t·∫°o b·ªô l·∫Øng nghe th√¥ng b√°o to√†n c·∫ßu...');
    
    // [FIX] L·∫•y role user hi·ªán t·∫°i (async, ch·∫°y t·ª´ng l·∫ßn)
    const initializeUserRole = async () => {
      try {
        const profileJson = await AsyncStorage.getItem('user_profile');
        if (profileJson) {
          const profile = JSON.parse(profileJson);
          userRoleRef.current = profile.role;
          console.log(`[NotificationContext] User role: ${userRoleRef.current}`);
        }
      } catch (e) {
        console.error('[NotificationContext] L·ªói l·∫•y user role:', e);
      }
    };
    
    // [FIX] Ch·∫°y sync tr∆∞·ªõc r·ªìi m·ªõi setup channels
    initializeUserRole();

    const triggerNotificationSound = () => {
      // Debounce: ch·ªâ ph√°t √¢m thanh n·∫øu kho·∫£ng c√°ch t·ª´ l·∫ßn tr∆∞·ªõc > 1.5 gi√¢y
      const now = Date.now();
      const timeSinceLastNotification = now - lastNotificationTimeRef.current;
      
      if (timeSinceLastNotification > 1500) {
        console.log('[NotificationContext] üîî Ph√°t √¢m thanh th√¥ng b√°o...', `(${timeSinceLastNotification}ms k·ªÉ t·ª´ l·∫ßn tr∆∞·ªõc)`);
        playNotificationSound();
        lastNotificationTimeRef.current = now;
      } else {
        console.log(`[NotificationContext] ‚è∏Ô∏è B·ªè qua √¢m thanh (ch·ªâ ${timeSinceLastNotification}ms k·ªÉ t·ª´ l·∫ßn tr∆∞·ªõc)`);
      }
    };

    // --- B·ªò L·∫ÆNG NGHE CHO NH√ÇN VI√äN ---
    // L·∫Øng nghe c√°c th√¥ng b√°o M·ªöI (INSERT) t·ª´ return_notifications
    // [M·ªöI] Ch·ªâ ph√°t √¢m thanh n·∫øu user l√† 'staff' (nhan_vien)
    // C√°c notification n√†y g·ª≠i t·ª´ b·∫øp: item_ready, out_of_stock, cancellation_*, return_item (t·ª´ b·∫øp y√™u c·∫ßu tr·∫£)
    const staffChannel = supabase
      .channel('global-staff-notifications')
      .on(
        'postgres_changes',
        { 
          event: 'INSERT',
          schema: 'public', 
          table: 'return_notifications',
        },
        (payload) => {
          // [FIX] Ch·ªâ ph√°t √¢m thanh n·∫øu user l√† nh√¢n vi√™n (staff)
          const notificationType = payload.new.notification_type;
          if (userRoleRef.current === 'nhan_vien' || userRoleRef.current === 'staff') {
            // Nh√¢n vi√™n ch·ªâ nghe khi:
            // - item_ready, out_of_stock, cancellation_approved, cancellation_rejected t·ª´ b·∫øp
            // - KH√îNG nghe return_item (return_item l√† nh√¢n vi√™n g·ª≠i cho b·∫øp)
            if (notificationType !== 'return_item') {
              console.log('[NotificationContext] Nh√¢n vi√™n nh·∫≠n th√¥ng b√°o t·ª´ b·∫øp:', payload.new);
              triggerNotificationSound();
            } else {
              console.log('[NotificationContext] ‚è≠Ô∏è Nh√¢n vi√™n b·ªè qua (return_item l√† c·ªßa b·∫øp)');
            }
          } else {
            console.log(`[NotificationContext] ‚è≠Ô∏è B·ªè qua (user role: ${userRoleRef.current}, kh√¥ng ph·∫£i staff)`);
          }
        }
      )
      .subscribe();

    // --- B·ªò L·∫ÆNG NGHE CHO B·∫æP ---
    // L·∫Øng nghe c√°c y√™u c·∫ßu h·ªßy/tr·∫£ m√≥n M·ªöI (INSERT) t·ª´ nh√¢n vi√™n
    // [M·ªöI] Ch·ªâ ph√°t √¢m thanh n·∫øu user l√† 'bep'
    // C≈©ng l·∫Øng nghe return_notifications v·ªõi notification_type='return_item' (nh√¢n vi√™n y√™u c·∫ßu tr·∫£)
    const kitchenChannel = supabase
      .channel('global-kitchen-notifications')
      .on(
        'postgres_changes',
        {
          event: 'INSERT',
          schema: 'public',
          table: 'cancellation_requests'
        },
        (payload) => {
          // [FIX] Ch·ªâ ph√°t √¢m thanh n·∫øu user l√† b·∫øp
          if (userRoleRef.current === 'bep') {
            console.log('[NotificationContext] B·∫øp nh·∫≠n y√™u c·∫ßu h·ªßy/tr·∫£ m·ªõi:', payload.new);
            triggerNotificationSound();
          } else {
            console.log(`[NotificationContext] ‚è≠Ô∏è B·ªè qua (user role: ${userRoleRef.current}, kh√¥ng ph·∫£i bep)`);
          }
        }
      )
      .subscribe();
    
    // [M·ªöI] Channel ri√™ng cho return_item notification (nh√¢n vi√™n y√™u c·∫ßu tr·∫£)
    const returnItemChannel = supabase
      .channel('global-return-item-notifications')
      .on(
        'postgres_changes',
        {
          event: 'INSERT',
          schema: 'public',
          table: 'return_notifications',
          filter: "notification_type=eq.return_item"
        },
        (payload) => {
          // [FIX] Ch·ªâ ph√°t √¢m thanh n·∫øu user l√† b·∫øp
          if (userRoleRef.current === 'bep') {
            console.log('[NotificationContext] B·∫øp nh·∫≠n y√™u c·∫ßu tr·∫£ t·ª´ nh√¢n vi√™n:', payload.new);
            triggerNotificationSound();
          } else {
            console.log(`[NotificationContext] ‚è≠Ô∏è B·ªè qua (user role: ${userRoleRef.current}, kh√¥ng ph·∫£i bep)`);
          }
        }
      )
      .subscribe();

    // --- B·ªò L·∫ÆNG NGHE CHO NH√ÇN VI√äN: MENU_ITEMS (H·∫æT H√ÄNG) ---
    // L·∫Øng nghe khi b·∫øp b√°o h·∫øt m·ªôt m√≥n
    const menuItemsChannel = supabase
      .channel('global-menu-items-changes')
      .on(
        'postgres_changes',
        {
          event: 'UPDATE',
          schema: 'public',
          table: 'menu_items',
          filter: 'is_available=eq.false'
        },
        (payload) => {
          console.log('[NotificationContext] B√°o h·∫øt h√†ng:', payload.new);
          triggerNotificationSound();
        }
      )
      .subscribe();

    // --- B·ªò L·∫ÆNG NGHE CHO B·∫æP: RETURN_SLIPS (NH√ÇN VI√äN TR·∫¢ M√ìN) ---
    // L·∫Øng nghe khi nh√¢n vi√™n t·∫°o phi·∫øu tr·∫£ h√†ng (return_slip)
    const returnSlipsChannel = supabase
      .channel('global-return-slips')
      .on(
        'postgres_changes',
        {
          event: 'INSERT',
          schema: 'public',
          table: 'return_slips'
        },
        (payload) => {
          console.log('[NotificationContext] Nh√¢n vi√™n t·∫°o y√™u c·∫ßu tr·∫£ h√†ng:', payload.new);
          triggerNotificationSound();
        }
      )
      .subscribe();

    // D·ªçn d·∫πp khi component unmount
    return () => {
      console.log('[NotificationContext] D·ª´ng b·ªô l·∫Øng nghe th√¥ng b√°o...');
      supabase.removeChannel(staffChannel);
      supabase.removeChannel(kitchenChannel);
      supabase.removeChannel(returnItemChannel);
      supabase.removeChannel(menuItemsChannel);
      supabase.removeChannel(returnSlipsChannel);
    };
  }, []); // M·∫£ng r·ªóng v√¨ kh√¥ng c√≥ dependencies

  return (
    <NotificationContext.Provider value={{}}>
      {children}
    </NotificationContext.Provider>
  );
};