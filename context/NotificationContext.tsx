// src/context/NotificationContext.tsx

import React, { createContext, useContext, useEffect } from 'react';
import { supabase } from '../services/supabase';
import { playNotificationSound } from '../utils/soundManager';

interface NotificationContextType {
  lastNotificationTime?: number;
}

const NotificationContext = createContext<NotificationContextType>({});

export const useNotifications = () => {
  return useContext(NotificationContext);
};

// Provider n√†y s·∫Ω bao b·ªçc to√†n b·ªô ·ª©ng d·ª•ng c·ªßa b·∫°n
export const NotificationProvider = ({ children }: { children: React.ReactNode }) => {
  // [C·∫¨P NH·∫¨T] S·ª≠ d·ª•ng useRef thay v√¨ useState ƒë·ªÉ l∆∞u th·ªùi gian m√† kh√¥ng re-render
  const lastNotificationTimeRef = React.useRef<number>(0);

  useEffect(() => {
    console.log('[NotificationContext] Kh·ªüi t·∫°o b·ªô l·∫Øng nghe th√¥ng b√°o to√†n c·∫ßu...');

    const triggerNotificationSound = () => {
      // Debounce: ch·ªâ ph√°t √¢m thanh n·∫øu kho·∫£ng c√°ch t·ª´ l·∫ßn tr∆∞·ªõc > 1.5 gi√¢y
      const now = Date.now();
      const timeSinceLastNotification = now - lastNotificationTimeRef.current;
      
      if (timeSinceLastNotification > 1500) {
        console.log('[NotificationContext] üîî Ph√°t √¢m thanh th√¥ng b√°o...', `(${timeSinceLastNotification}ms k·ªÉ t·ª´ l·∫ßn tr∆∞·ªõc)`);
        playNotificationSound();
        lastNotificationTimeRef.current = now;
      } else {
        console.log(`[NotificationContext] ‚è∏Ô∏è B·ªè qua √¢m thanh (ch·ªâ ${timeSinceLastNotification}ms k·ªÉ t·ª´ l·∫ßn tr∆∞·ªõc)`);
      }
    };

    // --- B·ªò L·∫ÆNG NGHE CHO NH√ÇN VI√äN ---
    // L·∫Øng nghe c√°c th√¥ng b√°o M·ªöI (INSERT) t·ª´ b·∫øp g·ª≠i cho nh√¢n vi√™n
    const staffChannel = supabase
      .channel('global-staff-notifications')
      .on(
        'postgres_changes',
        { 
          event: 'INSERT', // Ch·ªâ quan t√¢m ƒë·∫øn th√¥ng b√°o M·ªöI
          schema: 'public', 
          table: 'return_notifications',
        },
        (payload) => {
          console.log('[NotificationContext] Nh√¢n vi√™n nh·∫≠n th√¥ng b√°o m·ªõi:', payload.new);
          triggerNotificationSound();
        }
      )
      .subscribe();

    // --- B·ªò L·∫ÆNG NGHE CHO B·∫æP ---
    // L·∫Øng nghe c√°c y√™u c·∫ßu h·ªßy/tr·∫£ m√≥n M·ªöI (INSERT) t·ª´ nh√¢n vi√™n
    const kitchenChannel = supabase
      .channel('global-kitchen-notifications')
      .on(
        'postgres_changes',
        {
          event: 'INSERT', // Ch·ªâ quan t√¢m y√™u c·∫ßu M·ªöI
          schema: 'public',
          table: 'cancellation_requests'
        },
        (payload) => {
          console.log('[NotificationContext] B·∫øp nh·∫≠n y√™u c·∫ßu h·ªßy/tr·∫£ m·ªõi:', payload.new);
          triggerNotificationSound();
        }
      )
      .subscribe();

    // --- B·ªò L·∫ÆNG NGHE CHO NH√ÇN VI√äN: MENU_ITEMS (H·∫æT H√ÄNG) ---
    // L·∫Øng nghe khi b·∫øp b√°o h·∫øt m·ªôt m√≥n
    const menuItemsChannel = supabase
      .channel('global-menu-items-changes')
      .on(
        'postgres_changes',
        {
          event: 'UPDATE',
          schema: 'public',
          table: 'menu_items',
          filter: 'is_available=eq.false'
        },
        (payload) => {
          console.log('[NotificationContext] B√°o h·∫øt h√†ng:', payload.new);
          triggerNotificationSound();
        }
      )
      .subscribe();

    // --- B·ªò L·∫ÆNG NGHE CHO B·∫æP: RETURN_SLIPS (NH√ÇN VI√äN TR·∫¢ M√ìN) ---
    // L·∫Øng nghe khi nh√¢n vi√™n t·∫°o phi·∫øu tr·∫£ h√†ng (return_slip)
    const returnSlipsChannel = supabase
      .channel('global-return-slips')
      .on(
        'postgres_changes',
        {
          event: 'INSERT',
          schema: 'public',
          table: 'return_slips'
        },
        (payload) => {
          console.log('[NotificationContext] Nh√¢n vi√™n t·∫°o y√™u c·∫ßu tr·∫£ h√†ng:', payload.new);
          triggerNotificationSound();
        }
      )
      .subscribe();

    // D·ªçn d·∫πp khi component unmount
    return () => {
      console.log('[NotificationContext] D·ª´ng b·ªô l·∫Øng nghe th√¥ng b√°o...');
      supabase.removeChannel(staffChannel);
      supabase.removeChannel(kitchenChannel);
      supabase.removeChannel(menuItemsChannel);
      supabase.removeChannel(returnSlipsChannel);
    };
  }, []); // M·∫£ng r·ªóng v√¨ kh√¥ng c√≥ dependencies

  return (
    <NotificationContext.Provider value={{}}>
      {children}
    </NotificationContext.Provider>
  );
};