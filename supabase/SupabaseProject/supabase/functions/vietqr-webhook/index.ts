// /supabase/functions/vietqr-webhook/index.ts
// @ts-nocheck

import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

// H√†m ti·ªán √≠ch ƒë·ªÉ t·∫°o ƒë·ªô tr·ªÖ (delay)
const sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));

serve(async (req) => {
  try {
    const payload = await req.json();
    console.log("üì© Nh·∫≠n callback VietQR:", payload);

    const { description, amount } = payload;

    const match = description.match(/ThanhToan Don (\w{6})/i);
    if (!match || !match[1]) {
      console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y m√£ ƒë∆°n trong ghi ch√∫:", description);
      return new Response("No valid order code found", { status: 200 });
    }

    const orderCode = match[1];
    console.log(`üîé T√¨m th·∫•y order_code: ${orderCode}`);

    const supabase = createClient(
      Deno.env.get("SUPABASE_URL")!,
      Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!
    );

    let order = null;
    const MAX_RETRIES = 3; // Th·ª≠ l·∫°i t·ªëi ƒëa 3 l·∫ßn

    // ‚úÖ LOGIC TH·ª¨ L·∫†I ƒê·ªÇ CH·ªêNG RACE CONDITION
    for (let i = 0; i < MAX_RETRIES; i++) {
      console.log(`(L·∫ßn ${i + 1}) ƒêang t√¨m order...`);
      const { data, error } = await supabase
        .from("orders")
        .select("id, status")
        .eq("order_code", orderCode)
        .single();
      
      if (data && !error) {
        order = data;
        break; // T√¨m th·∫•y, tho√°t kh·ªèi v√≤ng l·∫∑p
      }
      
      // N·∫øu ch∆∞a ph·∫£i l·∫ßn cu·ªëi, ƒë·ª£i 1 gi√¢y r·ªìi th·ª≠ l·∫°i
      if (i < MAX_RETRIES - 1) {
        await sleep(1000); // ƒê·ª£i 1 gi√¢y
      }
    }

    if (!order) {
      console.error(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y order cho code ${orderCode} sau ${MAX_RETRIES} l·∫ßn th·ª≠.`);
      return new Response("Order not found after retries", { status: 200 });
    }
    
    if (order.status === 'paid' || order.status === 'closed') {
      console.log(`‚úÖ ƒê∆°n h√†ng ${order.id} ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥.`);
      return new Response("Order already processed", { status: 200 });
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i
    const { error: updateError } = await supabase
      .from("orders")
      .update({
        status: "paid",
        payment_method: "Chuy·ªÉn kho·∫£n",
        total_price: amount,
      })
      .eq("id", order.id);

    if (updateError) throw updateError;

    console.log(`‚úÖ ƒê√£ x√°c nh·∫≠n thanh to√°n cho order ${order.id}`);
    return new Response("ok", { status: 200 });

  } catch (err) {
    console.error("‚ùå L·ªói webhook:", err);
    return new Response("Internal Server Error", { status: 500 });
  }
});